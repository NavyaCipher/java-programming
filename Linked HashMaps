import java.util.LinkedHashMap;
import java.util.Map;

public class LongestSubstringWithLinkedHashMap {

    public static int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> charIndexMap = new LinkedHashMap<>();
        int maxLength = 0;
        int left = 0;

        for (int right = 0; right < s.length(); right++) {
            char current = s.charAt(right);

            // If character exists in map and its index is within current window
            if (charIndexMap.containsKey(current) && charIndexMap.get(current) >= left) {
                // Move left pointer to one past the last seen index of current character
                left = charIndexMap.get(current) + 1;
            }

            // Update or insert the current character's index
            charIndexMap.put(current, right);

            // Calculate the window size
            maxLength = Math.max(maxLength, right - left + 1);
        }

        return maxLength;
    }

    public static void main(String[] args) {
        String input = "abcabcbb";
        System.out.println("Length of longest substring: " + lengthOfLongestSubstring(input));
    }
}
